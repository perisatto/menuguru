name: pipeline
run-name: ${{ github.actor }} is running a new build.

on: [push, pull_request, workflow_dispatch]

jobs:       
  Unit-Tests:
    if: startsWith(github.ref_name, 'master')
        || startsWith(github.ref_name, 'release/')  
        || startsWith(github.ref_name, 'develop')
    runs-on: ubuntu-latest    
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 22
        uses: actions/setup-java@v4
        with:
          java-version: '22'
          distribution: 'temurin'
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file 
      
      - run: mvn test

      - name: Genarate JaCoCo Badge
        id: jacoco
        uses: cicirello/jacoco-badge-generator@v2

      - name: Log coverage percentage
        run: |
            echo "Coverage = ${{ steps.jacoco.outputs.coverage }}"
            echo "Branch coverage = ${{ steps.jacoco.outputs.branches }}"

      - name: Upload JaCoCo coverage report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: target/site/jacoco/
            
  Build:
    needs: Unit-Tests
    if: startsWith(github.ref_name, 'master')
        || startsWith(github.ref_name, 'release/')  
        || startsWith(github.ref_name, 'develop')    
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 22
        uses: actions/setup-java@v4
        with:
          java-version: '22'
          distribution: 'temurin'
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file 
          
      - name: Build with Maven
        run: mvn -B package -DskipTests --file pom.xml

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@v3
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          
  Publish:
    #needs: Build
    #if: startsWith(github.ref_name, 'master')
    runs-on: ubuntu-latest
    steps:      
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Log in to ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.ECR_REPOSITORY }} .

      - name: Tag Docker image
        run: |
          docker tag ${{ secrets.ECR_REPOSITORY }} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest
          
      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest                              

  Deploy-PRD:
    if: startsWith(github.ref_name, 'master')
    needs: Publish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name menuguru --region ${{ secrets.AWS_REGION }}

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Deploy to EKS using Helm
        run: |
          helm upgrade --install skull ./menuguru-helm-chart    
